{"version":3,"file":"Hangul.js","sources":["src/unicode/Range.mjs","src/assertChar.mjs","src/is.mjs","src/unicode/blocks.mjs","src/unicode/characters.mjs","src/array/makeAry.mjs","src/array/runAry.mjs","src/array/contains.mjs","src/array/isAll.mjs","src/unicode/groups.mjs","src/unicode/complex.mjs","src/fuel.mjs","src/composeComplex.mjs","src/unicode/syllable.mjs","src/composeSyllable.mjs","src/unicode/mappings.mjs","src/transformer.mjs","src/main.js","src/decomposeSyllable.mjs"],"sourcesContent":["export default class Range {\n  constructor(start, end) {\n    if (typeof (start + end) !== 'number') {\n      throw new TypeError('Both arguments to the Range constructor must be numbers!');\n    }\n    this.start = start;\n    this.end = end;\n    this.length = this.end - this.start + 1;\n  }\n\n  contains(num) {\n    return num >= this.start && num <= this.end;\n  }\n\n  forEach(fn) {\n    for (let i = this.start; i <= this.end; i++) {\n      fn(i);\n    }\n  }\n\n  map(fn) {\n    return Array(this.length).fill``.map((v, i) => fn(i + this.start));\n  }\n}\n","export default ((char) => {\n  if (typeof char !== 'string') {\n    throw new TypeError('char must be a string!');\n  } if (char.length - 1) {\n    throw new Error(`\"${char}\" must have a length of one!`);\n  }\n});\n","import Range from './unicode/Range';\nimport assertChar from './assertChar';\n\nexport default (range => (char) => {\n  assertChar(char);\n  if (range instanceof Range) {\n    return range.contains(char.codePointAt(0));\n  } if (Array.isArray(range)) {\n    return range.includes(char);\n  } if (typeof range === 'object') {\n    return !!range[char];\n  }\n  return false;\n});\n","import Range from './Range';\nimport is from '../is';\n\nexport const jamo = new Range(0x1100, 0x11FF);\nexport const compatibilityJamo = new Range(0x3130, 0x318F);\nexport const jamoExtendedA = new Range(0xA960, 0xA97F);\nexport const syllables = new Range(0xAC00, 0xD7AF);\nexport const jamoExtendedB = new Range(0xD7B0, 0xD7FF);\nexport const halfwidth = new Range(0xFFA0, 0xFFDF);\nexport const reserved = [\n  0x3130, 0x318F, // compatibilityJamo\n  new Range(0xA97D, 0xA97F), // jamoExtendedA\n  new Range(0xD7A4, 0xD7AF), // syllables\n  new Range(0xD7C7, 0xD7CA), // jamoExtendedB\n  new Range(0xD7FC, 0xD7FF), // jamoExtendedB\n];\nexport function isReserved(char) {\n  const code = char.codePointAt(0);\n  return reserved.includes(code) || reserved.filter(v => typeof v !== 'number').some(range => range.contains(code));\n}\nexport const isJamo = is(jamo);\nexport const isCompatibilityJamo = is(compatibilityJamo);\nexport const isJamoExtendedA = is(jamoExtendedA);\nexport const isSyllable = is(syllables);\nexport const isJamoExtendedB = is(jamoExtendedB);\nexport const isHalfwidth = is(halfwidth);\n","import is from '../is';\n\nconst consonants = {\n  ㄱ: 1,\n  ㄴ: 1,\n  ㄷ: 1,\n  ㄹ: 1,\n  ㅁ: 1,\n  ㅂ: 1,\n  ㅅ: 1,\n  ㅇ: 1,\n  ㅈ: 1,\n  ㅊ: 1,\n  ㅋ: 1,\n  ㅌ: 1,\n  ㅍ: 1,\n  ㅎ: 1,\n};\nconst vowels = {\n  ㅏ: 1,\n  ㅐ: 1,\n  ㅑ: 1,\n  ㅓ: 1,\n  ㅔ: 1,\n  ㅕ: 1,\n  ㅖ: 1,\n  ㅗ: 1,\n  ㅛ: 1,\n  ㅜ: 1,\n  ㅠ: 1,\n  ㅡ: 1,\n  ㅣ: 1,\n};\n// ['ㄱ', 'ㄴ', 'ㄷ', 'ㄹ', 'ㅁ', 'ㅂ', 'ㅅ', 'ㅇ', 'ㅈ', 'ㅊ', 'ㅋ', 'ㅌ', 'ㅍ', 'ㅎ'];\n// ['ㅏ', 'ㅐ', 'ㅑ', 'ㅒ', 'ㅓ', 'ㅔ', 'ㅕ', 'ㅖ', 'ㅗ', 'ㅛ', 'ㅜ', 'ㅠ', 'ㅡ', 'ㅣ'];\n// They're stored as objects so there's no need for iteration\n\nexport const isConsonant = is(consonants);\nexport const isVowel = is(vowels);\n","export default (aryLike) => {\n  if (typeof aryLike === 'string') {\n    return aryLike.split``;\n  } if (!Array.isArray(aryLike)) {\n    throw new TypeError('aryLike must be a string or an array!');\n  }\n  return aryLike;\n};\n","// I mean, how am I supposed to describe this?\nimport makeAry from './makeAry';\n\nexport default (method => arg => aryLike => makeAry(aryLike)[method](v => arg(v)));\n","import runAry from './runAry';\n\nexport default (runAry('some'));\n","import runAry from './runAry';\n\nexport default (runAry('every'));\n","import * as blocks from './blocks';\nimport { contains, isAll } from '../array';\n\nexport const isStandardHangul = char => blocks.isCompatibilityJamo(char) || blocks.isSyllable(char);\nexport const isHangul = char => (\n  isStandardHangul(char)\n  || blocks.isJamo(char)\n  || blocks.isJamoExtendedA(char)\n  || blocks.isJamoExtendedB(char)\n  || blocks.isHalfwidth(char)\n);\nexport const isAllHangul = isAll(isHangul);\nexport const isAllStandardHangul = isAll(isStandardHangul);\nexport const containsStandardHangul = contains(isStandardHangul);\nexport const containsHangul = contains(isHangul);\n","export const double = {\n  // the characters that you can type with \"one\" key + shift\n  ㄱ: 'ㄲ',\n  ㄷ: 'ㄸ',\n  ㅅ: 'ㅆ',\n  ㅈ: 'ㅉ',\n  ㅂ: 'ㅃ',\n};\nexport const complex = {\n  // consonants\n  ㄱ: {\n    ㄱ: 'ㄲ',\n    ㅅ: 'ㄳ',\n  },\n  ㄴ: {\n    ㅈ: 'ㄵ',\n    ㅎ: 'ㄶ',\n  },\n  ㄷ: {\n    ㄷ: 'ㄸ',\n  },\n  ㄹ: {\n    ㄱ: 'ㄺ',\n    ㅁ: 'ㄻ',\n    ㅂ: 'ㄼ',\n    ㅅ: 'ㄽ',\n    ㅌ: 'ㄾ',\n    ㅍ: 'ㄿ',\n    ㅎ: 'ㅀ',\n  },\n  ㅂ: {\n    ㅂ: 'ㅃ',\n    ㅅ: 'ㅄ',\n  },\n  ㅅ: {\n    ㅅ: 'ㅆ',\n  },\n  ㅈ: {\n    ㅈ: 'ㅉ',\n  },\n  // vowels\n  ㅗ: {\n    ㅏ: 'ㅘ',\n    ㅐ: 'ㅙ',\n    ㅣ: 'ㅚ',\n  },\n  ㅜ: {\n    ㅓ: 'ㅝ',\n    ㅔ: 'ㅞ',\n    ㅣ: 'ㅟ',\n  },\n  ㅡ: {\n    ㅣ: 'ㅢ',\n  },\n};\nexport const irregular = {\n  ㄴ: {\n    ㄴ: 'ㅥ',\n    ㄷ: 'ㅦ',\n    ㅅ: 'ㅧ',\n    ㅿ: 'ㅨ',\n  },\n  ㄹ: {\n    ㄱ: {\n      ㅅ: 'ㅩ',\n    },\n    ㄷ: 'ㅪ',\n    ㅂ: {\n      ㅅ: 'ㅫ',\n    },\n    ㅿ: 'ㅬ',\n    ㆆ: 'ㅭ',\n  },\n  ㅁ: {\n    ㅂ: 'ㅮ',\n    ㅅ: 'ㅯ',\n    ㅿ: 'ㅰ',\n  },\n  ㅂ: {\n    ㄱ: 'ㅲ',\n    ㄷ: 'ㅳ',\n    ㅅ: {\n      ㄱ: 'ㅴ',\n      ㄷ: 'ㅵ',\n    },\n    ㅈ: 'ㅶ',\n    ㅌ: 'ㅷ',\n  },\n  ㅅ: {\n    ㄱ: 'ㅺ',\n    ㄴ: 'ㅻ',\n    ㄷ: 'ㅼ',\n    ㅂ: 'ㅽ',\n    ㅈ: 'ㅾ',\n  },\n  ㅇ: {\n    ㅇ: 'ㆀ',\n  },\n  ㆁ: {\n    ㅅ: 'ㆁ',\n    ㅿ: 'ㅿ',\n  },\n  ㅎ: {\n    ㅎ: 'ㆅ',\n  },\n  ㅛ: {\n    ㅑ: 'ㆇ',\n    ㅒ: 'ㆈ',\n    ㅣ: 'ㆉ',\n  },\n  ㅠ: {\n    ㅕ: 'ㆊ',\n    ㅖ: 'ㆋ',\n    ㅣ: 'ㆌ',\n  },\n  ㆍ: {\n    ㅣ: 'ㆎ',\n  },\n};\n","export default ((generator, arg) => (...ary) => {\n  ary = ary.slice();\n  const gen = generator(arg);\n  let res = gen.next();\n  while (ary.length && !res.done) {\n    res = gen.next(ary.shift());\n  }\n  return { value: res.value, remaining: ary };\n});\n","import assertChar from './assertChar';\nimport { complex, irregular } from './unicode/complex';\nimport fuel from './fuel';\n\nexport function* composeComplexGenerator(includeIrregular = false) {\n  let objList = [complex];\n  if (includeIrregular) {\n    objList.push(irregular);\n  }\n  while (true) {\n    const currentChar = yield objList;\n    if (currentChar === null) {\n      return objList[0];\n    }\n    assertChar(currentChar);\n    const currentCharObj = objList.map(obj => obj[currentChar]).filter(v => v);\n    if (currentCharObj.length === 1 && typeof currentCharObj[0] === 'string') {\n      return currentCharObj[0];\n    } if (!currentCharObj.length) {\n      return `${objList[0].$ || ''}${currentChar}`;\n    }\n    objList = currentCharObj;\n  }\n}\nexport default (fuel(composeComplexGenerator, true));\n","export const cho = [\n  'ㄱ', 'ㄲ', 'ㄴ', 'ㄷ', 'ㄸ', 'ㄹ', 'ㅁ',\n  'ㅂ', 'ㅃ', 'ㅅ', 'ㅆ', 'ㅇ', 'ㅈ', 'ㅉ',\n  'ㅊ', 'ㅋ', 'ㅌ', 'ㅍ', 'ㅎ',\n];\nexport const choNum = {\n  ㄱ: 0,\n  ㄲ: 1,\n  ㄴ: 2,\n  ㄷ: 3,\n  ㄸ: 4,\n  ㄹ: 5,\n  ㅁ: 6,\n  ㅂ: 7,\n  ㅃ: 8,\n  ㅅ: 9,\n  ㅆ: 10,\n  ㅇ: 11,\n  ㅈ: 12,\n  ㅉ: 13,\n  ㅊ: 14,\n  ㅋ: 15,\n  ㅌ: 16,\n  ㅍ: 17,\n  ㅎ: 18,\n};\nexport const jung = [\n  'ㅏ', 'ㅐ', 'ㅑ', 'ㅒ', 'ㅓ', 'ㅔ', 'ㅕ',\n  'ㅖ', 'ㅗ', 'ㅘ', 'ㅙ', 'ㅚ', 'ㅛ', 'ㅜ',\n  'ㅝ', 'ㅞ', 'ㅟ', 'ㅠ', 'ㅡ', 'ㅢ', 'ㅣ',\n];\nexport const jungNum = {\n  ㅏ: 0,\n  ㅐ: 1,\n  ㅑ: 2,\n  ㅒ: 3,\n  ㅓ: 4,\n  ㅔ: 5,\n  ㅕ: 6,\n  ㅖ: 7,\n  ㅗ: 8,\n  ㅘ: 9,\n  ㅙ: 10,\n  ㅚ: 11,\n  ㅛ: 12,\n  ㅜ: 13,\n  ㅝ: 14,\n  ㅞ: 15,\n  ㅟ: 16,\n  ㅠ: 17,\n  ㅡ: 18,\n  ㅢ: 19,\n  ㅣ: 20,\n};\nexport const jong = [\n  null, 'ㄱ', 'ㄲ', 'ㄳ', 'ㄴ', 'ㄵ', 'ㄶ',\n  'ㄷ', 'ㄹ', 'ㄺ', 'ㄻ', 'ㄼ', 'ㄽ', 'ㄾ',\n  'ㄿ', 'ㅀ', 'ㅁ', 'ㅂ', 'ㅄ', 'ㅅ', 'ㅆ',\n  'ㅇ', 'ㅈ', 'ㅊ', 'ㅋ', 'ㅌ', 'ㅍ', 'ㅎ',\n];\nexport const jongNum = {\n  null: null,\n  undefined: null,\n  ㄱ: 1,\n  ㄲ: 2,\n  ㄳ: 3,\n  ㄴ: 4,\n  ㄵ: 5,\n  ㄶ: 6,\n  ㄷ: 7,\n  ㄹ: 8,\n  ㄺ: 9,\n  ㄻ: 10,\n  ㄼ: 11,\n  ㄽ: 12,\n  ㄾ: 13,\n  ㄿ: 14,\n  ㅀ: 15,\n  ㅁ: 16,\n  ㅂ: 17,\n  ㅄ: 18,\n  ㅅ: 19,\n  ㅆ: 20,\n  ㅇ: 21,\n  ㅈ: 22,\n  ㅊ: 23,\n  ㅋ: 24,\n  ㅌ: 25,\n  ㅍ: 26,\n  ㅎ: 27,\n};\n","import { choNum, jungNum, jongNum } from './unicode/syllable';\nimport fuel from './fuel';\nimport { syllables } from './unicode/blocks';\n\nconst composeSyllableFn = (cho, jung, jong = 0) => (\n  String.fromCodePoint(cho * 588 + jung * 28 + jong + syllables.start)\n);\nexport function* composeSyllableGenerator() {\n  const choChar = yield;\n  const cho = choNum[choChar];\n  if (!Number.isInteger(cho)) {\n    return choChar;\n  }\n  const jungChar = yield choChar;\n  const jung = jungNum[jungChar];\n  if (!Number.isInteger(jung)) {\n    return `${choChar}${jungChar}`;\n  }\n  const maybeComplete = composeSyllableFn(cho, jung);\n  const jongChar = yield maybeComplete;\n  const jong = jongNum[jongChar];\n  if (jong === null) {\n    return maybeComplete;\n  }\n  if (!Number.isInteger(jong)) {\n    return `${maybeComplete}${jongChar}`;\n  }\n  return composeSyllableFn(cho, jung, jong);\n}\nexport default (fuel(composeSyllableGenerator));\n","// if you're gonna copy this part, at least give me credit.\n// I had to do all of this manually.\nexport const jamo = {\n  ᄀ: 'ㄱ',\n  ᄁ: ['ㄱ', 'ㄱ'],\n  ᄂ: 'ㄴ',\n  ᄃ: 'ㄷ',\n  ᄄ: ['ㄷ', 'ㄷ'],\n  ᄅ: 'ㄹ',\n  ᄆ: 'ㅁ',\n  ᄇ: 'ㅂ',\n  ᄈ: ['ㅂ', 'ㅂ'],\n  ᄉ: 'ㅅ',\n  ᄊ: ['ㅅ', 'ㅅ'],\n  ᄋ: 'ㅇ',\n  ᄌ: 'ㅈ',\n  ᄍ: ['ㅈ', 'ㅈ'],\n  ᄎ: 'ㅊ',\n  ᄏ: 'ㅋ',\n  ᄐ: 'ㅌ',\n  ᄑ: 'ㅍ',\n  ᄒ: 'ㅎ',\n  ᄓ: ['ㄴ', 'ㄱ'],\n  ᄔ: ['ㄴ', 'ㄴ'],\n  ᄕ: ['ㄴ', 'ㄷ'],\n  ᄖ: ['ㄴ', 'ㅂ'],\n  ᄗ: ['ㄷ', 'ㄱ'],\n  ᄘ: ['ㄹ', 'ㄴ'],\n  ᄙ: ['ㄹ', 'ㄹ'],\n  ᄚ: ['ㄹ', 'ㅎ'],\n  ᄛ: ['ㄹ', 'ㅇ'],\n  ᄜ: ['ㅁ', 'ㅂ'],\n  ᄝ: 'ㅱ',\n  ᄞ: ['ㅂ', 'ㄱ'],\n  ᄟ: ['ㅂ', 'ㄴ'],\n  ᄠ: ['ㅂ', 'ㄷ'],\n  ᄡ: ['ㅂ', 'ㅅ'],\n  ᄢ: ['ㅂ', 'ㅅ', 'ㄱ'],\n  ᄣ: ['ㅂ', 'ㅅ', 'ㄷ'],\n  ᄤ: ['ㅂ', 'ㅅ', 'ㅂ'],\n  ᄥ: ['ㅂ', 'ㅅ', 'ㅅ'],\n  ᄦ: ['ㅂ', 'ㅅ', 'ㅈ'],\n  ᄧ: ['ㅂ', 'ㅈ'],\n  ᄨ: ['ㅂ', 'ㅊ'],\n  ᄩ: ['ㅂ', 'ㅌ'],\n  ᄪ: ['ㅂ', 'ㅍ'],\n  ᄫ: 'ㅸ',\n  ᄬ: 'ㅹ',\n  ᄭ: ['ㅅ', 'ㄱ'],\n  ᄮ: ['ㅅ', 'ㄴ'],\n  ᄯ: ['ㅅ', 'ㄷ'],\n  ᄰ: ['ㅅ', 'ㄹ'],\n  ᄱ: ['ㅅ', 'ㅁ'],\n  ᄲ: ['ㅅ', 'ㅂ'],\n  ᄳ: ['ㅅ', 'ㅂ', 'ㄱ'],\n  ᄴ: ['ㅅ', 'ㅅ', 'ㅅ'],\n  ᄵ: ['ㅅ', 'ㅇ'],\n  ᄶ: ['ㅅ', 'ㅈ'],\n  ᄷ: ['ㅅ', 'ㅊ'],\n  ᄸ: ['ㅅ', 'ㅋ'],\n  ᄹ: ['ㅅ', 'ㅌ'],\n  ᄺ: ['ㅅ', 'ㅍ'],\n  ᄻ: ['ㅅ', 'ㅎ'],\n  ᄼ: null,\n  ᄽ: null,\n  ᄾ: null,\n  ᄿ: null,\n  ᅀ: 'ㅿ',\n  ᅁ: ['ㅇ', 'ㄱ'],\n  ᅂ: ['ㅇ', 'ㄷ'],\n  ᅃ: ['ㅇ', 'ㅁ'],\n  ᅄ: ['ㅇ', 'ㅂ'],\n  ᅅ: ['ㅇ', 'ㅅ'],\n  ᅆ: ['ㅇ', 'ㅿ'],\n  ᅇ: ['ㅇ', 'ㅇ'],\n  ᅈ: ['ㅇ', 'ㅈ'],\n  ᅉ: ['ㅇ', 'ㅊ'],\n  ᅊ: ['ㅇ', 'ㅌ'],\n  ᅋ: ['ㅇ', 'ㅍ'],\n  ᅌ: 'ㆁ',\n  ᅍ: ['ㅈ', 'ㅇ'],\n  ᅎ: null,\n  ᅏ: null,\n  ᅐ: null,\n  ᅑ: null,\n  ᅒ: ['ㅊ', 'ㅋ'],\n  ᅓ: ['ㅊ', 'ㅎ'],\n  ᅔ: null,\n  ᅕ: null,\n  ᅖ: ['ㅂ', 'ㅂ'],\n  ᅗ: 'ㆄ',\n  ᅘ: ['ㅎ', 'ㅎ'],\n  ᅙ: 'ㆆ',\n  ᅚ: ['ㄱ', 'ㄷ'],\n  ᅛ: ['ㄱ', 'ㅅ'],\n  ᅜ: ['ㄱ', 'ㅈ'],\n  ᅝ: ['ㄱ', 'ㅎ'],\n  ᅞ: ['ㄷ', 'ㄹ'],\n  ᅡ: 'ㅏ',\n  ᅢ: 'ㅐ',\n  ᅣ: 'ㅑ',\n  ᅤ: 'ㅒ',\n  ᅥ: 'ㅓ',\n  ᅦ: 'ㅔ',\n  ᅧ: 'ㅕ',\n  ᅨ: 'ㅖ',\n  ᅩ: 'ㅗ',\n  ᅪ: ['ㅗ', 'ㅏ'],\n  ᅫ: ['ㅗ', 'ㅐ'],\n  ᅬ: ['ㅗ', 'ㅣ'],\n  ᅭ: 'ㅛ',\n  ᅮ: 'ㅜ',\n  ᅯ: ['ㅜ', 'ㅓ'],\n  ᅰ: ['ㅜ', 'ㅔ'],\n  ᅱ: ['ㅜ', 'ㅣ'],\n  ᅲ: 'ㅠ',\n  ᅳ: 'ㅡ',\n  ᅴ: ['ㅡ', 'ㅣ'],\n  ᅵ: 'ㅣ',\n  ᅶ: ['ㅏ', 'ㅗ'],\n  ᅷ: ['ㅏ', 'ㅜ'],\n  ᅸ: ['ㅑ', 'ㅗ'],\n  ᅹ: ['ㅑ', 'ㅛ'],\n  ᅺ: ['ㅓ', 'ㅗ'],\n  ᅻ: ['ㅓ', 'ㅜ'],\n  ᅼ: ['ㅓ', 'ㅡ'],\n  ᅽ: ['ㅕ', 'ㅗ'],\n  ᅾ: ['ㅕ', 'ㅜ'],\n  ᅿ: ['ㅗ', 'ㅓ'],\n  ᆀ: ['ㅔ', 'ㅗ'],\n  ᆁ: ['ㅖ', 'ㅗ'],\n  ᆂ: ['ㅗ', 'ㅗ'],\n  ᆃ: ['ㅗ', 'ㅜ'],\n  ᆄ: ['ㅛ', 'ㅑ'],\n  ᆅ: ['ㅛ', 'ㅒ'],\n  ᆆ: ['ㅛ', 'ㅕ'],\n  ᆇ: ['ㅛ', 'ㅗ'],\n  ᆈ: ['ㅛ', 'ㅣ'],\n  ᆉ: ['ㅜ', 'ㅏ'],\n  ᆊ: ['ㅜ', 'ㅐ'],\n  ᆋ: ['ㅜ', 'ㅓ', 'ㅡ'],\n  ᆌ: ['ㅜ', 'ㅖ'],\n  ᆍ: ['ㅜ', 'ㅜ'],\n  ᆎ: ['ㅠ', 'ㅏ'],\n  ᆏ: ['ㅠ', 'ㅓ'],\n  ᆐ: ['ㅠ', 'ㅔ'],\n  ᆑ: ['ㅠ', 'ㅕ'],\n  ᆒ: ['ㅠ', 'ㅔ'],\n  ᆓ: ['ㅠ', 'ㅜ'],\n  ᆔ: ['ㅠ', 'ㅣ'],\n  ᆕ: ['ㅡ', 'ㅜ'],\n  ᆖ: ['ㅡ', 'ㅡ'],\n  ᆗ: ['ㅡ', 'ㅣ', 'ㅜ'],\n  ᆘ: ['ㅣ', 'ㅏ'],\n  ᆙ: ['ㅣ', 'ㅑ'],\n  ᆚ: ['ㅣ', 'ㅗ'],\n  ᆛ: ['ㅣ', 'ㅜ'],\n  ᆜ: ['ㅣ', 'ㅡ'],\n  ᆝ: null,\n  ᆞ: 'ㆍ',\n  ᆟ: ['ㆍ', 'ㅓ'],\n  ᆠ: ['ㆍ', 'ㅜ'],\n  ᆡ: ['ㆍ', 'ㅣ'],\n  ᆢ: ['ㆍ', 'ㆍ'],\n  ᆣ: ['ㅏ', 'ㅡ'],\n  ᆤ: ['ㅑ', 'ㅜ'],\n  ᆥ: ['ㅕ', 'ㅑ'],\n  ᆦ: ['ㅗ', 'ㅑ'],\n  ᆧ: ['ㅗ', 'ㅒ'],\n  ᆨ: 'ㄱ',\n  ᆩ: ['ㄱ', 'ㄱ'],\n  ᆪ: ['ㄱ', 'ㅅ'],\n  ᆫ: 'ㄴ',\n  ᆬ: ['ㄴ', 'ㅈ'],\n  ᆭ: ['ㄴ', 'ㅎ'],\n  ᆮ: 'ㄷ',\n  ᆯ: 'ㄹ',\n  ᆰ: ['ㄹ', 'ㄱ'],\n  ᆱ: ['ㄹ', 'ㅁ'],\n  ᆲ: ['ㄹ', 'ㅂ'],\n  ᆳ: ['ㄹ', 'ㅅ'],\n  ᆴ: ['ㄹ', 'ㅌ'],\n  ᆵ: ['ㄹ', 'ㅍ'],\n  ᆶ: ['ㄹ', 'ㅎ'],\n  ᆷ: 'ㅁ',\n  ᆸ: 'ㅂ',\n  ᆹ: ['ㅂ', 'ㅅ'],\n  ᆺ: 'ㅅ',\n  ᆻ: ['ㅅ', 'ㅅ'],\n  ᆼ: 'ㅇ',\n  ᆽ: 'ㅈ',\n  ᆾ: 'ㅊ',\n  ᆿ: 'ㅋ',\n  ᇀ: 'ㅌ',\n  ᇁ: 'ㅍ',\n  ᇂ: 'ㅎ',\n  ᇃ: ['ㄱ', 'ㄹ'],\n  ᇄ: ['ㄱ', 'ㅅ', 'ㄱ'],\n  ᇅ: ['ㄴ', 'ㄱ'],\n  ᇆ: ['ㄴ', 'ㄷ'],\n  ᇇ: ['ㄴ', 'ㅅ'],\n  ᇈ: ['ㄴ', 'ㅿ'],\n  ᇉ: ['ㄴ', 'ㅌ'],\n  ᇊ: ['ㄷ', 'ㄱ'],\n  ᇋ: ['ㄷ', 'ㄹ'],\n  ᇌ: ['ㄹ', 'ㄱ', 'ㅅ'],\n  ᇍ: ['ㄹ', 'ㄴ'],\n  ᇎ: ['ㄹ', 'ㄷ'],\n  ᇏ: ['ㄹ', 'ㄷ', 'ㅎ'],\n  ᇐ: ['ㄹ', 'ㄹ'],\n  ᇑ: ['ㄹ', 'ㅁ', 'ㄱ'],\n  ᇒ: ['ㄹ', 'ㅁ', 'ㅅ'],\n  ᇓ: ['ㄹ', 'ㅂ', 'ㅅ'],\n  ᇔ: ['ㄹ', 'ㅂ', 'ㅎ'],\n  ᇕ: ['ㄹ', 'ㅸ'],\n  ᇖ: ['ㄹ', 'ㅅ', 'ㅅ'],\n  ᇗ: ['ㄹ', ''],\n  ᇘ: ['ㄹ', 'ㅋ'],\n  ᇙ: ['ㄹ', 'ㆆ'],\n  ᇚ: ['ㅁ', 'ㄱ'],\n  ᇛ: ['ㅁ', 'ㄹ'],\n  ᇜ: ['ㅁ', 'ㅂ'],\n  ᇝ: ['ㅁ', 'ㅅ'],\n  ᇞ: ['ㅁ', 'ㅅ', 'ㅅ'],\n  ᇟ: ['ㅁ', 'ㅿ'],\n  ᇠ: ['ㅁ', 'ㅊ'],\n  ᇡ: ['ㅁ', 'ㅎ'],\n  ᇢ: 'ㅱ',\n  ᇣ: ['ㅂ', 'ㄹ'],\n  ᇤ: ['ㅂ', 'ㅍ'],\n  ᇥ: ['ㅂ', 'ㅎ'],\n  ᇦ: 'ㅸ',\n  ᇧ: ['ㅅ', 'ㄱ'],\n  ᇨ: ['ㅅ', 'ㄷ'],\n  ᇩ: ['ㅅ', 'ㄹ'],\n  ᇪ: ['ㅅ', 'ㅂ'],\n  ᇫ: 'ㅿ',\n  ᇬ: ['ㆁ', 'ㄱ'],\n  ᇭ: ['ㆁ', 'ㄱ', 'ㄱ'],\n  ᇮ: ['ㆁ', 'ㆁ'],\n  ᇯ: ['ㆁ', 'ㅋ'],\n  ᇰ: 'ㆁ',\n  ᇱ: ['ㆁ', 'ㅅ'],\n  ᇲ: ['ㆁ', 'ㅿ'],\n  ᇳ: ['ㅍ', 'ㅂ'],\n  ᇴ: 'ㆄ',\n  ᇵ: ['ㅎ', 'ㄴ'],\n  ᇶ: ['ㅎ', 'ㄹ'],\n  ᇷ: ['ㅎ', 'ㅁ'],\n  ᇸ: ['ㅎ', 'ㅂ'],\n  ᇹ: 'ㆆ',\n  ᇺ: ['ㄱ', 'ㄴ'],\n  ᇻ: ['ㄱ', 'ㅂ'],\n  ᇼ: ['ㄱ', 'ㅊ'],\n  ᇽ: ['ㄱ', 'ㅋ'],\n  ᇾ: ['ㄱ', 'ㅎ'],\n  ᇿ: ['ㄴ', 'ㄴ'],\n};\nexport const compatibilityJamo = {\n  // this object is missing a lot of characters in the block since\n  // this file maps archaic characters to compatibilityJamo.\n  ㄲ: ['ㄱ', 'ㄱ'],\n  ㄳ: ['ㄱ', 'ㅅ'],\n  ㄵ: ['ㄴ', 'ㅈ'],\n  ㄶ: ['ㄴ', 'ㅎ'],\n  ㄸ: ['ㄷ', 'ㄷ'],\n  ㄻ: ['ㄹ', 'ㅁ'],\n  ㄺ: ['ㄹ', 'ㄱ'],\n  ㄼ: ['ㄹ', 'ㅂ'],\n  ㄽ: ['ㄹ', 'ㅅ'],\n  ㄾ: ['ㄹ', 'ㅌ'],\n  ㄿ: ['ㄹ', 'ㅍ'],\n  ㅀ: ['ㄹ', 'ㅎ'],\n  ㅃ: ['ㅂ', 'ㅂ'],\n  ㅄ: ['ㅂ', 'ㅅ'],\n  ㅆ: ['ㅅ', 'ㅅ'],\n  ㅉ: ['ㅈ', 'ㅈ'],\n  ㅘ: ['ㅗ', 'ㅏ'],\n  ㅙ: ['ㅗ', 'ㅐ'],\n  ㅚ: ['ㅗ', 'ㅣ'],\n  ㅝ: ['ㅜ', 'ㅓ'],\n  ㅞ: ['ㅜ', 'ㅔ'],\n  ㅟ: ['ㅜ', 'ㅣ'],\n  ㅢ: ['ㅡ', 'ㅣ'],\n  ㅥ: ['ㄴ', 'ㄴ'],\n  ㅦ: ['ㄴ', 'ㄷ'],\n  ㅧ: ['ㄴ', 'ㅅ'],\n  ㅨ: ['ㄴ', 'ㅿ'],\n  ㅩ: ['ㄹ', 'ㄱ', 'ㅅ'],\n  ㅪ: ['ㄹ', 'ㄷ'],\n  ㅫ: ['ㄹ', 'ㅂ', 'ㅅ'],\n  ㅬ: ['ㄹ', 'ㅿ'],\n  ㅭ: ['ㄹ', 'ㆆ'],\n  ㅮ: ['ㅁ', 'ㅂ'],\n  ㅯ: ['ㅁ', 'ㅅ'],\n  ㅰ: ['ㅁ', 'ㅿ'],\n  ㅲ: ['ㅂ', 'ㄱ'],\n  ㅳ: ['ㅂ', 'ㄷ'],\n  ㅴ: ['ㅂ', 'ㅅ', 'ㄱ'],\n  ㅵ: ['ㅂ', 'ㅅ', 'ㄷ'],\n  ㅶ: ['ㅂ', 'ㅈ'],\n  ㅷ: ['ㅂ', 'ㅌ'],\n  ㅺ: ['ㅅ', 'ㄱ'],\n  ㅻ: ['ㅅ', 'ㄴ'],\n  ㅼ: ['ㅅ', 'ㄷ'],\n  ㅽ: ['ㅅ', 'ㅂ'],\n  ㅾ: ['ㅅ', 'ㅈ'],\n  ㆀ: ['ㅇ', 'ㅇ'],\n  ㆂ: ['ㆁ', 'ㅅ'],\n  ㆃ: ['ㆁ', 'ㅿ'],\n  ㆅ: ['ㅎ', 'ㅎ'],\n  ㆇ: ['ㅛ', 'ㅑ'],\n  ㆈ: ['ㅛ', 'ㅒ'],\n  ㆉ: ['ㅛ', 'ㅣ'],\n  ㆊ: ['ㅠ', 'ㅕ'],\n  ㆋ: ['ㅠ', 'ㅖ'],\n  ㆌ: ['ㅠ', 'ㅣ'],\n  ㆎ: ['ㆍ', 'ㅣ'],\n};\nexport const jamoExtendedA = {\n  ꥠ: ['ㄷ', 'ㅁ'],\n  ꥡ: ['ㄷ', 'ㅂ'],\n  ꥢ: ['ㄷ', 'ㅅ'],\n  ꥣ: ['ㄷ', 'ㅈ'],\n  ꥤ: ['ㄹ', 'ㄱ'],\n  ꥥ: ['ㄹ', 'ㄱ', 'ㄱ'],\n  ꥦ: ['ㄹ', 'ㄷ'],\n  ꥧ: ['ㄹ', 'ㄷ', 'ㄷ'],\n  ꥨ: ['ㄹ', 'ㅁ'],\n  ꥩ: ['ㄹ', 'ㅂ'],\n  ꥪ: ['ㄹ', 'ㅂ', 'ㅂ'],\n  ꥫ: ['ㄹ', 'ㅸ'],\n  ꥬ: ['ㄹ', 'ㅅ'],\n  ꥭ: ['ㄹ', 'ㅈ'],\n  ꥮ: ['ㄹ', 'ㅋ'],\n  ꥯ: ['ㅁ', 'ㄱ'],\n  ꥰ: ['ㅁ', 'ㄷ'],\n  ꥱ: ['ㅁ', 'ㅅ'],\n  ꥲ: ['ㅂ', 'ㅅ', 'ㅌ'],\n  ꥳ: ['ㅂ', 'ㅋ'],\n  ꥴ: ['ㅂ', 'ㅎ'],\n  ꥵ: ['ㅅ', 'ㅅ', 'ㅂ'],\n  ꥶ: ['ㅇ', 'ㄹ'],\n  ꥷ: ['ㅇ', 'ㅎ'],\n  ꥸ: ['ㅈ', 'ㅈ', 'ㅎ'],\n  ꥹ: ['ㅌ', 'ㅌ'],\n  ꥺ: ['ㅍ', 'ㅎ'],\n  ꥻ: ['ㅎ', 'ㅅ'],\n  ꥼ: ['ㆆ', 'ㆆ'],\n};\nexport const jamoExtendedB = {\n  ힰ: ['ㅗ', 'ㅕ'],\n  ힱ: ['ㅗ', 'ㅗ', 'ㅣ'],\n  ힲ: ['ㅛ', 'ㅏ'],\n  ힳ: ['ㅛ', 'ㅐ'],\n  ힴ: ['ㅛ', 'ㅓ'],\n  ힵ: ['ㅜ', 'ㅕ'],\n  ힶ: ['ㅜ', 'ㅣ', 'ㅣ'],\n  ힷ: ['ㅠ', 'ㅐ'],\n  ힸ: ['ㅠ', 'ㅗ'],\n  ힹ: ['ㅡ', 'ㅏ'],\n  ힺ: ['ㅡ', 'ㅓ'],\n  ힻ: ['ㅡ', 'ㅔ'],\n  ힼ: ['ㅡ', 'ㅗ'],\n  ힽ: ['ㅣ', 'ㅏ', 'ㅗ'],\n  ힾ: ['ㅣ', 'ㅒ'],\n  ힿ: ['ㅣ', 'ㅕ'],\n  ퟀ: ['ㅣ', 'ㅖ'],\n  ퟁ: ['ㅣ', 'ㅗ', 'ㅣ'],\n  ퟂ: ['ㅣ', 'ㅛ'],\n  ퟃ: ['ㅣ', 'ㅠ'],\n  ퟄ: ['ㅣ', 'ㅣ'],\n  ퟅ: ['ㆍ', 'ㅏ'],\n  ퟆ: ['ㆍ', 'ㅔ'],\n  ퟋ: ['ㄴ', ''],\n  ퟌ: ['ㄴ', ''],\n  ퟍ: ['ㄷ', 'ㄷ'],\n  ퟎ: ['ㄷ', 'ㄷ', 'ㅂ'],\n  ퟏ: ['ㄷ', 'ㅂ'],\n  ퟐ: ['ㄷ', 'ㅅ'],\n  ퟑ: ['ㄷ', 'ㅅ', 'ㄱ'],\n  ퟒ: ['ㄷ', 'ㅈ'],\n  ퟓ: ['ㄷ', 'ㅊ'],\n  ퟔ: ['ㄷ', 'ㅌ'],\n  ퟕ: ['ㄹ', 'ㄱ', 'ㄱ'],\n  ퟖ: ['ㄹ', 'ㄱ', 'ㅎ'],\n  ퟗ: ['ㄹ', 'ㄹ', 'ㅋ'],\n  ퟘ: ['ㄹ', 'ㅁ', 'ㅎ'],\n  ퟙ: ['ㄹ', 'ㅂ', 'ㄷ'],\n  ퟚ: ['ㄹ', 'ㅂ', 'ㅍ'],\n  ퟛ: ['ㄹ', 'ㆁ'],\n  ퟜ: ['ㄹ', 'ㆆ', 'ㅎ'],\n  ퟝ: null,\n  ퟞ: ['ㅁ', 'ㄴ'],\n  ퟟ: ['ㅁ', 'ㄴ', 'ㄴ'],\n  ퟠ: ['ㅁ', 'ㅁ'],\n  ퟡ: ['ㅁ', 'ㅂ', 'ㅅ'],\n  ퟢ: ['ㅁ', 'ㅈ'],\n  ퟣ: ['ㅂ', 'ㄷ'],\n  ퟤ: ['ㅂ', 'ㄹ', 'ㅍ'],\n  ퟥ: ['ㅂ', 'ㅁ'],\n  ퟦ: ['ㅂ', 'ㅂ'],\n  ퟧ: ['ㅂ', 'ㅅ', 'ㄷ'],\n  ퟨ: ['ㅂ', 'ㅈ'],\n  ퟩ: ['ㅂ', 'ㅊ'],\n  ퟪ: ['ㅅ', 'ㅁ'],\n  ퟫ: ['ㅅ', 'ㅸ'],\n  ퟬ: ['ㅅ', 'ㅅ', 'ㄱ'],\n  ퟭ: ['ㅅ', 'ㅅ', 'ㄷ'],\n  ퟮ: ['ㅅ', 'ㅿ'],\n  ퟯ: ['ㅅ', 'ㅈ'],\n  ퟰ: ['ㅅ', 'ㅊ'],\n  ퟱ: ['ㅅ', 'ㅌ'],\n  ퟲ: ['ㅅ', 'ㅎ'],\n  ퟳ: ['ㅿ', 'ㅂ'],\n  ퟴ: ['ㅿ', 'ㅸ'],\n  ퟵ: ['ㆁ', 'ㅁ'],\n  ퟶ: ['ㆁ', 'ㅎ'],\n  ퟷ: ['ㅈ', 'ㅂ'],\n  ퟸ: ['ㅈ', 'ㅂ', 'ㅂ'],\n  ퟹ: ['ㅈ', 'ㅈ'],\n  ퟺ: ['ㅍ', 'ㅅ'],\n  ퟻ: ['ㅍ', 'ㅌ'],\n};\nexport const halfwidth = {\n  ﾡ: 'ㄱ',\n  ﾢ: ['ㄱ', 'ㄱ'],\n  ﾣ: ['ㄱ', 'ㅅ'],\n  ﾤ: 'ㄴ',\n  ﾥ: ['ㄴ', 'ㅈ'],\n  ﾦ: ['ㄴ', 'ㅎ'],\n  ﾧ: 'ㄷ',\n  ﾨ: ['ㄷ', 'ㄷ'],\n  ﾩ: 'ㄹ',\n  ﾪ: ['ㄹ', 'ㄱ'],\n  ﾫ: ['ㄹ', 'ㅁ'],\n  ﾬ: ['ㄹ', 'ㅂ'],\n  ﾭ: ['ㄹ', 'ㅅ'],\n  ﾮ: ['ㄹ', 'ㅌ'],\n  ﾯ: ['ㄹ', 'ㅍ'],\n  ﾰ: ['ㄹ', 'ㅎ'],\n  ﾱ: 'ㅁ',\n  ﾲ: 'ㅂ',\n  ﾳ: ['ㅂ', 'ㅂ'],\n  ﾴ: ['ㅂ', 'ㅅ'],\n  ﾵ: 'ㅅ',\n  ﾶ: ['ㅅ', 'ㅅ'],\n  ﾷ: 'ㅇ',\n  ﾸ: 'ㅈ',\n  ﾹ: ['ㅈ', 'ㅈ'],\n  ﾺ: 'ㅊ',\n  ﾻ: 'ㅋ',\n  ﾼ: 'ㅌ',\n  ﾽ: 'ㅍ',\n  ﾾ: 'ㅎ',\n  ￂ: 'ㅏ',\n  ￃ: 'ㅐ',\n  ￄ: 'ㅑ',\n  ￅ: 'ㅒ',\n  ￆ: 'ㅓ',\n  ￇ: 'ㅔ',\n  ￊ: 'ㅕ',\n  ￋ: 'ㅖ',\n  ￌ: 'ㅗ',\n  ￍ: ['ㅗ', 'ㅏ'],\n  ￎ: ['ㅗ', 'ㅐ'],\n  ￏ: ['ㅗ', 'ㅣ'],\n  ￒ: 'ㅛ',\n  ￓ: 'ㅜ',\n  ￔ: ['ㅜ', 'ㅓ'],\n  ￕ: ['ㅜ', 'ㅔ'],\n  ￖ: ['ㅜ', 'ㅣ'],\n  ￗ: 'ㅠ',\n  ￚ: 'ㅡ',\n  ￛ: ['ㅡ', 'ㅣ'],\n  ￜ: 'ㅣ',\n};\nconst all = Object.assign({}, jamo, compatibilityJamo, jamoExtendedA, jamoExtendedB, halfwidth);\nexport default (all);\n","// tries to transform everything into disassembled standard hangul\nimport { isHangul, isStandardHangul } from './unicode/groups';\nimport { makeAry } from './array';\nimport mappings from './unicode/mappings';\n\nexport function transformChar(char) {\n  if (isHangul(char)) {\n    const comp = mappings[char];\n    if (comp) {\n      return comp;\n    }\n    return char;\n  }\n  return char;\n}\nexport function transformNonStandardChar(char) {\n  if (isStandardHangul(char)) {\n    return transformChar(char);\n  }\n  return char;\n}\nexport default function transform(str, ignoreStandard = false) {\n  const ary = makeAry(str);\n  if (ignoreStandard) {\n    return ary.split``.mapp(transformNonStandardChar);\n  }\n  return ary.split``.map(transformChar);\n}\nexport function transformToString(str) {\n  return transform(str).flat();\n}\n","import { isSyllable } from './unicode/blocks';\nimport { isConsonant, isVowel } from './unicode/characters';\nimport {\n  isHangul,\n  isStandardHangul,\n  isAllHangul,\n  isAllStandardHangul,\n  containsHangul,\n  containsStandardHangul,\n} from './unicode/groups';\nimport assertChar from './assertChar';\nimport composeComplex from './composeComplex';\nimport composeSyllable from './composeSyllable';\nimport decomposeSyllable from './decomposeSyllable';\nimport transform, { transformChar } from './transformer';\n\nfunction isComplex(char) {\n  assertChar(char);\n  return !!(transformChar(char).length - 1);\n}\nexport {\n  isSyllable,\n  isHangul,\n  isStandardHangul,\n  isAllHangul,\n  isAllStandardHangul,\n  containsHangul,\n  containsStandardHangul,\n  isConsonant,\n  isVowel,\n  isComplex,\n  composeComplex,\n  composeSyllable,\n  decomposeSyllable,\n  transform,\n};\n","import assertChar from './assertChar';\nimport { isSyllable, syllables } from './unicode/blocks';\nimport { cho, jung, jong } from './unicode/syllable';\n\nexport default ((syllable) => {\n  assertChar(syllable);\n  if (!isSyllable(syllable)) {\n    throw new Error('Decomposing a syllable requires a syllable to decompose!');\n  }\n  const code = syllable.codePointAt(0) - syllables.start;\n  const jongNum = code % 28;\n  const q = (code - jongNum) / 28;\n  const jungNum = q % 21;\n  const choNum = 0 | q / 21;\n  return [cho[choNum], jung[jungNum], jong[jongNum]].filter(v => v);\n});\n"],"names":["Range","[object Object]","start","end","TypeError","this","length","num","fn","i","Array","fill","map","v","char","Error","range","assertChar","contains","codePointAt","isArray","includes","jamo","compatibilityJamo","jamoExtendedA","syllables","jamoExtendedB","halfwidth","isJamo","is","isCompatibilityJamo","isJamoExtendedA","isSyllable","isJamoExtendedB","isHalfwidth","isConsonant","ㄱ","ㄴ","ㄷ","ㄹ","ㅁ","ㅂ","ㅅ","ㅇ","ㅈ","ㅊ","ㅋ","ㅌ","ㅍ","ㅎ","isVowel","ㅏ","ㅐ","ㅑ","ㅓ","ㅔ","ㅕ","ㅖ","ㅗ","ㅛ","ㅜ","ㅠ","ㅡ","ㅣ","aryLike","split","method","arg","makeAry","runAry","isStandardHangul","blocks.isCompatibilityJamo","blocks.isSyllable","isHangul","blocks.isJamo","blocks.isJamoExtendedA","blocks.isJamoExtendedB","blocks.isHalfwidth","isAllHangul","isAll","isAllStandardHangul","containsStandardHangul","containsHangul","complex","irregular","ㅿ","ㆆ","ㆁ","ㅒ","ㆍ","generator","ary","slice","gen","res","next","done","shift","value","remaining","fuel","includeIrregular","objList","push","currentChar","currentCharObj","obj","filter","$","cho","choNum","ㄲ","ㄸ","ㅃ","ㅆ","ㅉ","jung","jungNum","ㅘ","ㅙ","ㅚ","ㅝ","ㅞ","ㅟ","ㅢ","jong","jongNum","null","undefined","ㄳ","ㄵ","ㄶ","ㄺ","ㄻ","ㄼ","ㄽ","ㄾ","ㄿ","ㅀ","ㅄ","composeSyllableFn","String","fromCodePoint","choChar","Number","isInteger","jungChar","maybeComplete","jongChar","all","Object","assign","ᄀ","ᄁ","ᄂ","ᄃ","ᄄ","ᄅ","ᄆ","ᄇ","ᄈ","ᄉ","ᄊ","ᄋ","ᄌ","ᄍ","ᄎ","ᄏ","ᄐ","ᄑ","ᄒ","ᄓ","ᄔ","ᄕ","ᄖ","ᄗ","ᄘ","ᄙ","ᄚ","ᄛ","ᄜ","ᄝ","ᄞ","ᄟ","ᄠ","ᄡ","ᄢ","ᄣ","ᄤ","ᄥ","ᄦ","ᄧ","ᄨ","ᄩ","ᄪ","ᄫ","ᄬ","ᄭ","ᄮ","ᄯ","ᄰ","ᄱ","ᄲ","ᄳ","ᄴ","ᄵ","ᄶ","ᄷ","ᄸ","ᄹ","ᄺ","ᄻ","ᄼ","ᄽ","ᄾ","ᄿ","ᅀ","ᅁ","ᅂ","ᅃ","ᅄ","ᅅ","ᅆ","ᅇ","ᅈ","ᅉ","ᅊ","ᅋ","ᅌ","ᅍ","ᅎ","ᅏ","ᅐ","ᅑ","ᅒ","ᅓ","ᅔ","ᅕ","ᅖ","ᅗ","ᅘ","ᅙ","ᅚ","ᅛ","ᅜ","ᅝ","ᅞ","ᅡ","ᅢ","ᅣ","ᅤ","ᅥ","ᅦ","ᅧ","ᅨ","ᅩ","ᅪ","ᅫ","ᅬ","ᅭ","ᅮ","ᅯ","ᅰ","ᅱ","ᅲ","ᅳ","ᅴ","ᅵ","ᅶ","ᅷ","ᅸ","ᅹ","ᅺ","ᅻ","ᅼ","ᅽ","ᅾ","ᅿ","ᆀ","ᆁ","ᆂ","ᆃ","ᆄ","ᆅ","ᆆ","ᆇ","ᆈ","ᆉ","ᆊ","ᆋ","ᆌ","ᆍ","ᆎ","ᆏ","ᆐ","ᆑ","ᆒ","ᆓ","ᆔ","ᆕ","ᆖ","ᆗ","ᆘ","ᆙ","ᆚ","ᆛ","ᆜ","ᆝ","ᆞ","ᆟ","ᆠ","ᆡ","ᆢ","ᆣ","ᆤ","ᆥ","ᆦ","ᆧ","ᆨ","ᆩ","ᆪ","ᆫ","ᆬ","ᆭ","ᆮ","ᆯ","ᆰ","ᆱ","ᆲ","ᆳ","ᆴ","ᆵ","ᆶ","ᆷ","ᆸ","ᆹ","ᆺ","ᆻ","ᆼ","ᆽ","ᆾ","ᆿ","ᇀ","ᇁ","ᇂ","ᇃ","ᇄ","ᇅ","ᇆ","ᇇ","ᇈ","ᇉ","ᇊ","ᇋ","ᇌ","ᇍ","ᇎ","ᇏ","ᇐ","ᇑ","ᇒ","ᇓ","ᇔ","ᇕ","ᇖ","ᇗ","ᇘ","ᇙ","ᇚ","ᇛ","ᇜ","ᇝ","ᇞ","ᇟ","ᇠ","ᇡ","ᇢ","ᇣ","ᇤ","ᇥ","ᇦ","ᇧ","ᇨ","ᇩ","ᇪ","ᇫ","ᇬ","ᇭ","ᇮ","ᇯ","ᇰ","ᇱ","ᇲ","ᇳ","ᇴ","ᇵ","ᇶ","ᇷ","ᇸ","ᇹ","ᇺ","ᇻ","ᇼ","ᇽ","ᇾ","ᇿ","ㅥ","ㅦ","ㅧ","ㅨ","ㅩ","ㅪ","ㅫ","ㅬ","ㅭ","ㅮ","ㅯ","ㅰ","ㅲ","ㅳ","ㅴ","ㅵ","ㅶ","ㅷ","ㅺ","ㅻ","ㅼ","ㅽ","ㅾ","ㆀ","ㆂ","ㆃ","ㆅ","ㆇ","ㆈ","ㆉ","ㆊ","ㆋ","ㆌ","ㆎ","ꥠ","ꥡ","ꥢ","ꥣ","ꥤ","ꥥ","ꥦ","ꥧ","ꥨ","ꥩ","ꥪ","ꥫ","ꥬ","ꥭ","ꥮ","ꥯ","ꥰ","ꥱ","ꥲ","ꥳ","ꥴ","ꥵ","ꥶ","ꥷ","ꥸ","ꥹ","ꥺ","ꥻ","ꥼ","ힰ","ힱ","ힲ","ힳ","ힴ","ힵ","ힶ","ힷ","ힸ","ힹ","ힺ","ힻ","ힼ","ힽ","ힾ","ힿ","ퟀ","ퟁ","ퟂ","ퟃ","ퟄ","ퟅ","ퟆ","ퟋ","ퟌ","ퟍ","ퟎ","ퟏ","ퟐ","ퟑ","ퟒ","ퟓ","ퟔ","ퟕ","ퟖ","ퟗ","ퟘ","ퟙ","ퟚ","ퟛ","ퟜ","ퟝ","ퟞ","ퟟ","ퟠ","ퟡ","ퟢ","ퟣ","ퟤ","ퟥ","ퟦ","ퟧ","ퟨ","ퟩ","ퟪ","ퟫ","ퟬ","ퟭ","ퟮ","ퟯ","ퟰ","ퟱ","ퟲ","ퟳ","ퟴ","ퟵ","ퟶ","ퟷ","ퟸ","ퟹ","ퟺ","ퟻ","ﾡ","ﾢ","ﾣ","ﾤ","ﾥ","ﾦ","ﾧ","ﾨ","ﾩ","ﾪ","ﾫ","ﾬ","ﾭ","ﾮ","ﾯ","ﾰ","ﾱ","ﾲ","ﾳ","ﾴ","ﾵ","ﾶ","ﾷ","ﾸ","ﾹ","ﾺ","ﾻ","ﾼ","ﾽ","ﾾ","ￂ","ￃ","ￄ","ￅ","ￆ","ￇ","ￊ","ￋ","ￌ","ￍ","ￎ","ￏ","ￒ","ￓ","ￔ","ￕ","ￖ","ￗ","ￚ","ￛ","ￜ","transformChar","comp","mappings","transformNonStandardChar","syllable","code","q","str","ignoreStandard","mapp"],"mappings":"oCAAe,MAAMA,EACnBC,YAAYC,EAAOC,GACjB,GAA6B,iBAAjBD,EAAQC,GAClB,MAAM,IAAIC,UAAU,4DAEtBC,KAAKH,MAAQA,EACbG,KAAKF,IAAMA,EACXE,KAAKC,OAASD,KAAKF,IAAME,KAAKH,MAAQ,EAGxCD,SAASM,GACP,OAAOA,GAAOF,KAAKH,OAASK,GAAOF,KAAKF,IAG1CF,QAAQO,GACN,IAAK,IAAIC,EAAIJ,KAAKH,MAAOO,GAAKJ,KAAKF,IAAKM,IACtCD,EAAGC,GAIPR,IAAIO,GACF,OAAOE,MAAML,KAAKC,QAAQK,OAAOC,IAAI,CAACC,EAAGJ,IAAMD,EAAGC,EAAIJ,KAAKH,eCrB9CY,IACf,GAAoB,iBAATA,EACT,MAAM,IAAIV,UAAU,0BACpB,GAAIU,EAAKR,OAAS,EAClB,MAAM,IAAIS,UAAUD,oCCDRE,GAAUF,IACxBG,EAAWH,GACPE,aAAiBhB,EACZgB,EAAME,SAASJ,EAAKK,YAAY,IACnCT,MAAMU,QAAQJ,GACXA,EAAMK,SAASP,GACD,iBAAVE,KACFA,EAAMF,ICPZ,MAAMQ,EAAO,IAAItB,EAAM,KAAQ,MACzBuB,EAAoB,IAAIvB,EAAM,MAAQ,OACtCwB,EAAgB,IAAIxB,EAAM,MAAQ,OAClCyB,EAAY,IAAIzB,EAAM,MAAQ,OAC9B0B,EAAgB,IAAI1B,EAAM,MAAQ,OAClC2B,EAAY,IAAI3B,EAAM,MAAQ,OAY9B4B,GATX,IAAI5B,EAAM,MAAQ,OAClB,IAAIA,EAAM,MAAQ,OAClB,IAAIA,EAAM,MAAQ,OAClB,IAAIA,EAAM,MAAQ,OAME6B,EAAGP,IACZQ,EAAsBD,EAAGN,GACzBQ,EAAkBF,EAAGL,GACrBQ,EAAaH,EAAGJ,GAChBQ,EAAkBJ,EAAGH,GACrBQ,EAAcL,EAAGF,GCYjBQ,EAAcN,EAnCR,CACjBO,IAAG,EACHC,IAAG,EACHC,IAAG,EACHC,IAAG,EACHC,IAAG,EACHC,IAAG,EACHC,IAAG,EACHC,IAAG,EACHC,IAAG,EACHC,IAAG,EACHC,IAAG,EACHC,IAAG,EACHC,IAAG,EACHC,IAAG,IAsBQC,EAAUrB,EApBR,CACbsB,IAAG,EACHC,IAAG,EACHC,IAAG,EACHC,IAAG,EACHC,IAAG,EACHC,IAAG,EACHC,IAAG,EACHC,IAAG,EACHC,IAAG,EACHC,IAAG,EACHC,IAAG,EACHC,IAAG,EACHC,IAAG,UC/BWC,IACd,GAAuB,iBAAZA,EACT,OAAOA,EAAQC,QACf,IAAKvD,MAAMU,QAAQ4C,GACnB,MAAM,IAAI5D,UAAU,yCAEtB,OAAO4D,KCHOE,GAAUC,GAAOH,GAAWI,EAAQJ,GAASE,GAAQrD,GAAKsD,EAAItD,MCD9DwD,EAAO,UCAPA,EAAO,eCCVC,EAAmBxD,GAAQyD,EAA2BzD,IAAS0D,EAAkB1D,GACjF2D,EAAW3D,GACtBwD,EAAiBxD,IACd4D,EAAc5D,IACd6D,EAAuB7D,IACvB8D,EAAuB9D,IACvB+D,EAAmB/D,GAEXgE,EAAcC,EAAMN,GACpBO,EAAsBD,EAAMT,GAC5BW,EAAyB/D,EAASoD,GAClCY,EAAiBhE,EAASuD,GCN1BU,EAAU,CAErB/C,IAAG,CACDA,IAAG,IACHM,IAAG,KAELL,IAAG,CACDO,IAAG,IACHK,IAAG,KAELX,IAAG,CACDA,IAAG,KAELC,IAAG,CACDH,IAAG,IACHI,IAAG,IACHC,IAAG,IACHC,IAAG,IACHK,IAAG,IACHC,IAAG,IACHC,IAAG,KAELR,IAAG,CACDA,IAAG,IACHC,IAAG,KAELA,IAAG,CACDA,IAAG,KAELE,IAAG,CACDA,IAAG,KAGLc,IAAG,CACDP,IAAG,IACHC,IAAG,IACHW,IAAG,KAELH,IAAG,CACDN,IAAG,IACHC,IAAG,IACHQ,IAAG,KAELD,IAAG,CACDC,IAAG,MAGMqB,EAAY,CACvB/C,IAAG,CACDA,IAAG,IACHC,IAAG,IACHI,IAAG,IACH2C,IAAG,KAEL9C,IAAG,CACDH,IAAG,CACDM,IAAG,KAELJ,IAAG,IACHG,IAAG,CACDC,IAAG,KAEL2C,IAAG,IACHC,IAAG,KAEL9C,IAAG,CACDC,IAAG,IACHC,IAAG,IACH2C,IAAG,KAEL5C,IAAG,CACDL,IAAG,IACHE,IAAG,IACHI,IAAG,CACDN,IAAG,IACHE,IAAG,KAELM,IAAG,IACHG,IAAG,KAELL,IAAG,CACDN,IAAG,IACHC,IAAG,IACHC,IAAG,IACHG,IAAG,IACHG,IAAG,KAELD,IAAG,CACDA,IAAG,KAEL4C,IAAG,CACD7C,IAAG,IACH2C,IAAG,KAELpC,IAAG,CACDA,IAAG,KAELU,IAAG,CACDN,IAAG,IACHmC,IAAG,IACHzB,IAAG,KAELF,IAAG,CACDL,IAAG,IACHC,IAAG,IACHM,IAAG,KAEL0B,IAAG,CACD1B,IAAG,YCpHQ,CAAE2B,EAAWvB,IAAQ,IAAIwB,KACtCA,EAAMA,EAAIC,QACV,MAAMC,EAAMH,EAAUvB,GACtB,IAAI2B,EAAMD,EAAIE,OACd,KAAOJ,EAAIrF,SAAWwF,EAAIE,MACxBF,EAAMD,EAAIE,KAAKJ,EAAIM,SAErB,MAAO,CAAEC,MAAOJ,EAAII,MAAOC,UAAWR,UCiBxBS,EApBT,UAAkCC,GAAmB,GAC1D,IAAIC,EAAU,CAACnB,GAIf,IAHIkB,GACFC,EAAQC,KAAKnB,KAEF,CACX,MAAMoB,QAAoBF,EAC1B,GAAoB,OAAhBE,EACF,OAAOF,EAAQ,GAEjBrF,EAAWuF,GACX,MAAMC,EAAiBH,EAAQ1F,IAAI8F,GAAOA,EAAIF,IAAcG,OAAO9F,GAAKA,GACxE,GAA8B,IAA1B4F,EAAenG,QAA6C,iBAAtBmG,EAAe,GACvD,OAAOA,EAAe,GACtB,IAAKA,EAAenG,OACpB,SAAUgG,EAAQ,GAAGM,GAAK,KAAKJ,IAEjCF,EAAUG,KAGgC,GCxBvC,MAAMI,EAAM,CACjB,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC9B,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC9B,IAAK,IAAK,IAAK,IAAK,KAETC,EAAS,CACpB1E,IAAG,EACH2E,IAAG,EACH1E,IAAG,EACHC,IAAG,EACH0E,IAAG,EACHzE,IAAG,EACHC,IAAG,EACHC,IAAG,EACHwE,IAAG,EACHvE,IAAG,EACHwE,IAAG,GACHvE,IAAG,GACHC,IAAG,GACHuE,IAAG,GACHtE,IAAG,GACHC,IAAG,GACHC,IAAG,GACHC,IAAG,GACHC,IAAG,IAEQmE,EAAO,CAClB,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC9B,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC9B,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAEnBC,EAAU,CACrBlE,IAAG,EACHC,IAAG,EACHC,IAAG,EACHmC,IAAG,EACHlC,IAAG,EACHC,IAAG,EACHC,IAAG,EACHC,IAAG,EACHC,IAAG,EACH4D,IAAG,EACHC,IAAG,GACHC,IAAG,GACH7D,IAAG,GACHC,IAAG,GACH6D,IAAG,GACHC,IAAG,GACHC,IAAG,GACH9D,IAAG,GACHC,IAAG,GACH8D,IAAG,GACH7D,IAAG,IAEQ8D,EAAO,CAClB,KAAM,IAAK,IAAK,IAAK,IAAK,IAAK,IAC/B,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC9B,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC9B,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAEnBC,EAAU,CACrBC,KAAM,KACNC,UAAW,KACX5F,IAAG,EACH2E,IAAG,EACHkB,IAAG,EACH5F,IAAG,EACH6F,IAAG,EACHC,IAAG,EACH7F,IAAG,EACHC,IAAG,EACH6F,IAAG,EACHC,IAAG,GACHC,IAAG,GACHC,IAAG,GACHC,IAAG,GACHC,IAAG,GACHC,IAAG,GACHlG,IAAG,GACHC,IAAG,GACHkG,IAAG,GACHjG,IAAG,GACHwE,IAAG,GACHvE,IAAG,GACHC,IAAG,GACHC,IAAG,GACHC,IAAG,GACHC,IAAG,GACHC,IAAG,GACHC,IAAG,ICrFC2F,EAAoB,CAAC/B,EAAKO,EAAMS,EAAO,IAC3CgB,OAAOC,cAAoB,IAANjC,EAAmB,GAAPO,EAAYS,EAAOpG,EAAUvB,aAwBhDkG,EAtBT,YACL,MAAM2C,QACAlC,EAAMC,EAAOiC,GACnB,IAAKC,OAAOC,UAAUpC,GACpB,OAAOkC,EAET,MAAMG,QAAiBH,EACjB3B,EAAOC,EAAQ6B,GACrB,IAAKF,OAAOC,UAAU7B,GACpB,SAAU2B,IAAUG,IAEtB,MAAMC,EAAgBP,EAAkB/B,EAAKO,GACvCgC,QAAiBD,EACjBtB,EAAOC,EAAQsB,GACrB,OAAa,OAATvB,EACKsB,EAEJH,OAAOC,UAAUpB,GAGfe,EAAkB/B,EAAKO,EAAMS,MAFxBsB,IAAgBC,MCvBvB,MA2dDC,EAAMC,OAAOC,OAAO,GA3dN,CAClBC,IAAG,IACHC,IAAG,CAAC,IAAK,KACTC,IAAG,IACHC,IAAG,IACHC,IAAG,CAAC,IAAK,KACTC,IAAG,IACHC,IAAG,IACHC,IAAG,IACHC,IAAG,CAAC,IAAK,KACTC,IAAG,IACHC,IAAG,CAAC,IAAK,KACTC,IAAG,IACHC,IAAG,IACHC,IAAG,CAAC,IAAK,KACTC,IAAG,IACHC,IAAG,IACHC,IAAG,IACHC,IAAG,IACHC,IAAG,IACHC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,IACHC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,IAAK,KACdC,IAAG,CAAC,IAAK,IAAK,KACdC,IAAG,CAAC,IAAK,IAAK,KACdC,IAAG,CAAC,IAAK,IAAK,KACdC,IAAG,CAAC,IAAK,IAAK,KACdC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,IACHC,IAAG,IACHC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,IAAK,KACdC,IAAG,CAAC,IAAK,IAAK,KACdC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,KACHC,IAAG,KACHC,IAAG,KACHC,IAAG,KACHC,IAAG,IACHC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,IACHC,IAAG,CAAC,IAAK,KACTC,IAAG,KACHC,IAAG,KACHC,IAAG,KACHC,IAAG,KACHC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,KACHC,IAAG,KACHC,IAAG,CAAC,IAAK,KACTC,IAAG,IACHC,IAAG,CAAC,IAAK,KACTC,IAAG,IACHC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,IACHC,IAAG,IACHC,IAAG,IACHC,IAAG,IACHC,IAAG,IACHC,IAAG,IACHC,IAAG,IACHC,IAAG,IACHC,IAAG,IACHC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,IACHC,IAAG,IACHC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,IACHC,IAAG,IACHC,IAAG,CAAC,IAAK,KACTC,IAAG,IACHC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,IAAK,KACdC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,IAAK,KACdC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,KACHC,IAAG,IACHC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,IACHC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,IACHC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,IACHC,IAAG,IACHC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,IACHC,IAAG,IACHC,IAAG,CAAC,IAAK,KACTC,IAAG,IACHC,IAAG,CAAC,IAAK,KACTC,IAAG,IACHC,IAAG,IACHC,IAAG,IACHC,IAAG,IACHC,IAAG,IACHC,IAAG,IACHC,IAAG,IACHC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,IAAK,KACdC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,IAAK,KACdC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,IAAK,KACdC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,IAAK,KACdC,IAAG,CAAC,IAAK,IAAK,KACdC,IAAG,CAAC,IAAK,IAAK,KACdC,IAAG,CAAC,IAAK,IAAK,KACdC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,IAAK,KACdC,IAAG,CAAC,IAAK,IACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,IAAK,KACdC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,IACHC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,IACHC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,IACHC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,IAAK,KACdC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,IACHC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,IACHC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,IACHC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,MAEsB,CAG/BtS,IAAG,CAAC,IAAK,KACTkB,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTnB,IAAG,CAAC,IAAK,KACTqB,IAAG,CAAC,IAAK,KACTD,IAAG,CAAC,IAAK,KACTE,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTzB,IAAG,CAAC,IAAK,KACT0B,IAAG,CAAC,IAAK,KACTzB,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTG,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACT0R,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,IAAK,KACdC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,IAAK,KACdC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,IAAK,KACdC,IAAG,CAAC,IAAK,IAAK,KACdC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,MAEkB,CAC3BC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,IAAK,KACdC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,IAAK,KACdC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,IAAK,KACdC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,IAAK,KACdC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,IAAK,KACdC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,IAAK,KACdC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,MAEkB,CAC3BC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,IAAK,KACdC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,IAAK,KACdC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,IAAK,KACdC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,IAAK,KACdC,IAAG,CAAC,IAAK,KACTC,IAAG,CAAC,IAAK,KACTC,IAA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"}